// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: raft_inspector.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftInspector_GetNodeInfo_FullMethodName    = "/raftinspector.RaftInspector/GetNodeInfo"
	RaftInspector_GetClusterInfo_FullMethodName = "/raftinspector.RaftInspector/GetClusterInfo"
)

// RaftInspectorClient is the client API for RaftInspector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftInspectorClient interface {
	GetNodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfo, error)
}

type raftInspectorClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftInspectorClient(cc grpc.ClientConnInterface) RaftInspectorClient {
	return &raftInspectorClient{cc}
}

func (c *raftInspectorClient) GetNodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, RaftInspector_GetNodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftInspectorClient) GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, RaftInspector_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftInspectorServer is the server API for RaftInspector service.
// All implementations must embed UnimplementedRaftInspectorServer
// for forward compatibility.
type RaftInspectorServer interface {
	GetNodeInfo(context.Context, *emptypb.Empty) (*NodeInfo, error)
	GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfo, error)
	mustEmbedUnimplementedRaftInspectorServer()
}

// UnimplementedRaftInspectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftInspectorServer struct{}

func (UnimplementedRaftInspectorServer) GetNodeInfo(context.Context, *emptypb.Empty) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedRaftInspectorServer) GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedRaftInspectorServer) mustEmbedUnimplementedRaftInspectorServer() {}
func (UnimplementedRaftInspectorServer) testEmbeddedByValue()                       {}

// UnsafeRaftInspectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftInspectorServer will
// result in compilation errors.
type UnsafeRaftInspectorServer interface {
	mustEmbedUnimplementedRaftInspectorServer()
}

func RegisterRaftInspectorServer(s grpc.ServiceRegistrar, srv RaftInspectorServer) {
	// If the following call pancis, it indicates UnimplementedRaftInspectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftInspector_ServiceDesc, srv)
}

func _RaftInspector_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftInspectorServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftInspector_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftInspectorServer).GetNodeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftInspector_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftInspectorServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftInspector_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftInspectorServer).GetClusterInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftInspector_ServiceDesc is the grpc.ServiceDesc for RaftInspector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftInspector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftinspector.RaftInspector",
	HandlerType: (*RaftInspectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _RaftInspector_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _RaftInspector_GetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft_inspector.proto",
}
